:wave: ​Introducing Support Guide
:shield: ​Policies and procedure
Scale protocol, once an incident arrives to the support team or its detected by the support team: 
Incident priority standards, based on impact in business, which affects incident treatment and how to report the incident (P1, P2, P3)
:tools:  ​Most common incidents and how to solve the
1. Manual Premium  
2. Defer a closed match by a given matchId
3. Update a competition with a given projectKey
4. Close a match by a given matchId or fid
5. Change the configuration for a given competition 
6. Remove cache
7. Identifying the real premium account from a user 
8. Using the matchCheckSync endpoint to reclose a match
:wave: Introducing Support Guide!

¡Hello everyone! The main goal of this guide is to approach the information and experience we have on supporting Swish to possible new support members, and also consolidate and portray all the information in a single and accessible place for the entire team.

If you are reading this and you feel like you can provide more knowledge to this guide, contact the support team and for sure it will be included.

:shield: Policies and procedures
 

Scale protocol, once an incident arrives to the support team or its detected by the support team: 
1.Support Team

2.Backend team member in the support wheel for the weekend

3.Team Lead

 

Incident priority standards, based on impact in business, which affects incident treatment and how to report the incident (P1, P2, P3)
1.Priority 1 (P1) → Critical errors, blocking the app. 
Examples: very high response time in our services, Swish view not working properly, login problems, scoresheet generation, etc.

2.Priority 2 (P2) → Downgraded performance of the app. 
Examples: clearing cache to make sure the information is matching properly DB-app, events response time, possible problems while closing a match, etc.

3.Priority 3 (P3) → Support team must intervene, but the app performance is ok and the app is working.
Examples: change the configuration for a competition, manual premium for a new user, etc.

:tools:  Most common incidents and how to solve them
 

1. Manual Premium  
At a glance: Creating manual premium subscriptions 

 

2. Defer a closed match by a given matchId
To defer a closed match and make it playable again, we will need to delete all the information saved in Google Cloud DataStore. 

There are plenty of entities inside DataStore involved, so we will need to do the next query for all of them (Actions, Assign*, MatchEvent).

DataStore -> Query : key, has ancestor, key (Match, *match id*) -> delete all the information.

Now we want to make sure this is also shown in Swish, so we need to delete all the information from MongoDB. To obtain the FID of the match from a given match id, we need to follow the next steps.

DataStore -> Query: key, is equal to, *match id* -> Get the fid and the projectKey-> Hex to ASCII the fid. 

You can use this online tool for the conversion:

Hex to ASCII | Hex to Text converter 

There are also plenty of collections involved in Mongo (actions, matchActorStats, matchPlayers, matchScores, matchStatus, matchStats, events), so we will need to do this query to find and delete all the information.

MongoDB -> Query: {projectKey: *projectKey*, matchId: *matchId converted*}. For the events collection, we need have in count the payload object).

  

3. Update a competition with a given projectKey
Theres two ways to update the competition:

1.Updating the competition manually in MongoDB 

MongoDB -> competitions Collection -> Query: {projectKey: *projectKey*}

Change the updateAt field date to for example a month ago, then enter Swish to do any kind of petition to the competition to force it to update. 

2.Sending a message to providers.DataRequested pub/sub to update the competition, formed like the next example: 

{"fid":"840910", "projectKey":"fimba", "cmKey":"leverade", "type":"COMPETITION", "seasonId":"5ece7058fe22885760c89718", "updatedAt": null }

Removing cache for this competition could be needed.

 

4. Close a match by a given matchId or fid
Previous step if we have fid:  

ASCII to Hex the fid -> DataStore-> Match Entity search -> Get matchId

Close match: 

Google Cloud Platform -> Pub/Sub -> sc.match.postprocess -> Send message (matchId)

 

5. Change the configuration for a given competition 
Google Cloud Platform -> DataStore->Select the Configuration entity

Each column of the entity is a parameter of the competition.

 

6. Remove cache
Removing the whole cache: 

Insomnia/Postman -> Send petition to https://remove-cache-moznsx6kda-ew.a.run.app/removeCache (DELETE OR POST)

Body: ​{"db": 0, "patterns": ["*"] }​

More information about remove cache with patterns: 

Cache management 

 

7. Identifying the real premium account from a user 
Google Cloud Platform → Logging → Explorer → Introduce this query: 

resource.type="cloud_run_revision"

"Receipt from user"

 

8. Using the matchCheckSync endpoint to reclose a match
 Insomnia/Postman → https://europe-west1-nbn23-competition-manager.cloudfunctions.net/matchCheckSync → Send a message with the matchId.

 Note: useful when you need to for example regenerate the scoresheet, having in count all the    match data is correct.